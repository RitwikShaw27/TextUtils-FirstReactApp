{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","className","style","id","type","Navbar","to","title","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","split","join","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","filter","element","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setalert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.da965515.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setmyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // });\r\n    \r\n    let myStyle = {\r\n        color: props.mode === 'dark'?'white':'#000000a8',\r\n        backgroundColor: props.mode === 'dark'?'#000000a8':'white',\r\n        \r\n    }\r\n\r\n    // const [btnText,setBtnText] = useState(\"Enable dark mode\")\r\n\r\n    // const toggleStyle = () =>{\r\n    //     if(myStyle.color==='black'){\r\n    //         setmyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid black'\r\n    //         })\r\n    //         setBtnText(\"Enable light mode\")\r\n    //     }\r\n    //     else{\r\n    //         setmyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setBtnText(\"Enable dark mode\")\r\n    //     }\r\n    // }\r\n    \r\n    return (\r\n    <div className=\"container\" style={myStyle}>\r\n        <h1 className=\"my-3\">About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n            <button className=\"accordion-button collapsed \" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"false\" aria-controls=\"collapseOne\">\r\n                <strong>Analyse your text</strong>\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n                Textutils gives you a way to analyse your text quickly and efficiently.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                <strong>Free to use</strong>\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n                TextUtils is a free character counter tool that provides instant character count and word count statistics for a given text. Textutils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                <strong>Browser Compatible</strong>\r\n            </button>\r\n            </h2>\r\n            <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n                This word counter software words in any web browser such as Chrome, Firefox, Internet Explorer, Safari, Opera, etc. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        {/* <div className=\"container my-3\">\r\n            <button onClick={toggleStyle} type=\"button\" className=\"btn btn-warning\"> {btnText}</button>\r\n        </div> */}\r\n       \r\n    </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className= {`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\n// PROPTYPES \r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string.isRequired };\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    // let disabled = true\r\n\r\n    const handleOnChange = (event)=>{\r\n        //console.log(\"On change was clicked\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpClick = ()=>{\r\n        //console.log(\"Uppercase was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase !\", \"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        //console.log(\"Uppercase was clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase !\", \"success\");\r\n    }\r\n\r\n    const handleClr = ()=>{        \r\n        let newText = (\"\");\r\n        setText(newText);\r\n        props.showAlert(\"Text cleared !\", \"success\");\r\n    }\r\n\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied to Clipboard !!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed !!\", \"success\");\r\n    }\r\n\r\n    // const [count, setCount] = useState(0);   HOOKS   DECLARATION OF A NEW STATE VARIABLE, WHICH WE'LL CALL \"count\" and setCount function will be used to update the text\r\n    const [text, setText] = useState('');\r\n    // text = \"New Text\";\r\n    // setText(\"new text\");\r\n    return (\r\n    <>\r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h1>{props.heading}</h1>             \r\n        <div className=\"mb-3\">             \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#343a40':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"4\"></textarea>\r\n        </div>\r\n        <button disabled={text.length===0} className=\"btn btn-success mx-2 my-2\" onClick={handleUpClick}>CONVERT TO UPPERCASE</button>\r\n        <button disabled={text.length===0} className=\"btn btn-warning mx-2 my-2\" onClick={handleLoClick}>CONVERT TO LOWERCASE</button>    \r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-2 my-2\" onClick={handleExtraSpaces}>REMOVE EXTRA SPACE</button>\r\n        <button disabled={text.length===0} className=\"btn btn-info mx-2 my-2\" onClick={handleCopy}>COPY TEXT</button>\r\n        <button disabled={text.length===0} className=\"btn btn-secondary mx-2 my-2\" onClick={handleClr}>CLEAR TEXT</button>\r\n\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} minutes to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Nothing to preview\"}</p>\r\n    </div>\r\n    </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        <div style={{height: '50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //Whether dark mode is enabled or not\n  const [alert, setalert] = useState(null)\n\n  const showAlert = (message, type)=>{\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n\n\n  const toggleMode = ()=>{\n    if(mode === 'dark'){\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = 'TextUtils - Light Mode'\n    }\n    else {\n      setMode('dark');\n      document.body.style.backgroundColor = 'black';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = 'TextUtils - Dark Mode';\n      // setInterval(()=>{\n      //   document.title = \"TextUtils is amazing\";\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils now !!\"\n      // }, 1500);\n    }\n  }\n\n  return (\n    <>\n      <Router>\n      <Navbar title= \"TextUtils\" aboutText= \"About Us\" mode= {mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode}/>\n            </Route>            \n            <Route exact path=\"/\">\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyse below:\" mode={mode}/>              \n            </Route>\n        </Switch> \n      </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}